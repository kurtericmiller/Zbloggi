  
  /** Return list of articles associated with this tag */
  function getTagArticles($tag, $options = null)
  {
    $limit = (isset($options['offset']) && isset($options['count'])) ? ' limit ' . $options['offset'] . ',' . $options['count'] : null;
    $sql = 'select c.* from keywords a, tag_join b, articles c where a.keyword = ? and a.id = b.keyword_id and b.article_id = c.id order by c.created_at desc' . $limit;
    return new Local_Domain_Mappers_DeferredArticleCollection($this, $sql, array($tag));
  }
  /** Return list of articles associated with this author */
  function getAuthorArticles($author_id)
  {
    $sql = 'select * from articles where user_id = ? order by created_at desc';
    return new Local_Domain_Mappers_DeferredArticleCollection($this, $sql, array($author_id));
  }
  /** Return keywords for this article */
  function getKeywords(Local_Domain_DomainObject $obj)
  {
    $sql = 'select a.keyword as keyword from keywords a, tag_join b where b.article_id = ? and b.keyword_id = a.id';
    $result = $this->doStatement($sql, array($obj->getId()));
    $keywords = $result->fetchAll();
    $values = array();
    foreach ($keywords as $keyword) {
      $tag = $keyword['keyword'];
      array_push($values, $tag);
    }
    return $values;
  }
  /** Return the count of comments for this article */
  function getCommentCount(Local_Domain_DomainObject $obj)
  {
    return $this->doStatement('select count(*) from comments where article_id = ?', array($obj->getId()), SINGLETON);
  }
  /** Return the count of comments for all articles */
  function getTotalArticlesWithComments()
  {
    return $this->doStatement('select count(*) as "" from articles a where published = 1 and (select count(*) from comments where article_id = a.id) > 0', array(), SINGLETON);
  }
  function scrubKeywords(Local_Domain_DomainObject $obj)
  {
    $id = $obj->getId();
    /* handle article */
    $sql = "delete from tag_join where article_id = ?";
    $this->doStatement($sql, array($id));
    /* handle orphans */
    $sql = "delete from keywords where id not in (select keyword_id from tag_join)";
    $this->doStatement($sql, array());
  }
